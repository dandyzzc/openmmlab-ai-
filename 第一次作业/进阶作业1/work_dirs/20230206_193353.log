2023-02-06 19:33:53,669 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.3, V11.3.109
GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
PyTorch: 1.10.0+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.1+cu113
OpenCV: 4.6.0
MMCV: 1.6.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-06 19:33:53,669 - mmcls - INFO - Distributed training: False
2023-02-06 19:33:53,798 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet_CIFAR',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=10,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'CIFAR10'
img_norm_cfg = dict(
    mean=[125.307, 122.961, 113.8575],
    std=[51.5865, 50.847, 51.255],
    to_rgb=False)
train_pipeline = [
    dict(type='RandomCrop', size=32, padding=4),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[125.307, 122.961, 113.8575],
        std=[51.5865, 50.847, 51.255],
        to_rgb=False),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(
        type='Normalize',
        mean=[125.307, 122.961, 113.8575],
        std=[51.5865, 50.847, 51.255],
        to_rgb=False),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=64,
    workers_per_gpu=2,
    train=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(type='RandomCrop', size=32, padding=4),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        test_mode=True),
    test=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        test_mode=True))
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=4e-05)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[4, 8])
runner = dict(type='EpochBasedRunner', max_epochs=10)
checkpoint_config = dict(interval=10)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'https://download.openmmlab.com/mmclassification/v0/resnet/resnet50_b16x8_cifar10_20210528-f54bfad9.pth'
resume_from = None
workflow = [('train', 1)]
evaluation = dict(
    interval=1,
    metric=['accuracy', 'precision', 'f1_score'],
    metric_options=dict(topk=(1, )))
work_dir = './work_dirs/resnet50_8xb16_cifar10_custom'
gpu_ids = [0]

2023-02-06 19:33:53,799 - mmcls - INFO - Set random seed to 1763751156, deterministic: False
2023-02-06 19:33:53,992 - mmcls - INFO - initialize ResNet_CIFAR with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-06 19:33:54,168 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([10, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([10]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-06 19:34:03,090 - mmcls - INFO - load checkpoint from http path: https://download.openmmlab.com/mmclassification/v0/resnet/resnet50_b16x8_cifar10_20210528-f54bfad9.pth
2023-02-06 19:34:09,804 - mmcls - INFO - Start running, host: root@autodl-container-c03b118952-04070990, work_dir: /root/mmclassification/work_dirs/resnet50_8xb16_cifar10_custom
2023-02-06 19:34:09,805 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-06 19:34:09,805 - mmcls - INFO - workflow: [('train', 1)], max: 10 epochs
2023-02-06 19:34:09,805 - mmcls - INFO - Checkpoints will be saved to /root/mmclassification/work_dirs/resnet50_8xb16_cifar10_custom by HardDiskBackend.
2023-02-06 19:34:18,522 - mmcls - INFO - Epoch [1][100/782]	lr: 1.000e-02, eta: 0:11:10, time: 0.087, data_time: 0.025, memory: 1847, loss: 0.0005
2023-02-06 19:34:24,654 - mmcls - INFO - Epoch [1][200/782]	lr: 1.000e-02, eta: 0:09:24, time: 0.061, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:34:30,792 - mmcls - INFO - Epoch [1][300/782]	lr: 1.000e-02, eta: 0:08:45, time: 0.061, data_time: 0.001, memory: 1847, loss: 0.0004
2023-02-06 19:34:36,950 - mmcls - INFO - Epoch [1][400/782]	lr: 1.000e-02, eta: 0:08:22, time: 0.062, data_time: 0.001, memory: 1847, loss: 0.0005
2023-02-06 19:34:43,125 - mmcls - INFO - Epoch [1][500/782]	lr: 1.000e-02, eta: 0:08:07, time: 0.062, data_time: 0.001, memory: 1847, loss: 0.0004
2023-02-06 19:34:49,310 - mmcls - INFO - Epoch [1][600/782]	lr: 1.000e-02, eta: 0:07:54, time: 0.062, data_time: 0.001, memory: 1847, loss: 0.0005
2023-02-06 19:34:55,467 - mmcls - INFO - Epoch [1][700/782]	lr: 1.000e-02, eta: 0:07:44, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0005
2023-02-06 19:35:03,718 - mmcls - INFO - Epoch(val) [1][157]	accuracy_top-1: 95.5900, precision: 95.5971, f1_score: 95.5908
2023-02-06 19:35:11,880 - mmcls - INFO - Epoch [2][100/782]	lr: 1.000e-02, eta: 0:07:02, time: 0.081, data_time: 0.020, memory: 1847, loss: 0.0004
2023-02-06 19:35:18,037 - mmcls - INFO - Epoch [2][200/782]	lr: 1.000e-02, eta: 0:06:57, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0003
2023-02-06 19:35:24,179 - mmcls - INFO - Epoch [2][300/782]	lr: 1.000e-02, eta: 0:06:51, time: 0.061, data_time: 0.000, memory: 1847, loss: 0.0003
2023-02-06 19:35:30,317 - mmcls - INFO - Epoch [2][400/782]	lr: 1.000e-02, eta: 0:06:45, time: 0.061, data_time: 0.001, memory: 1847, loss: 0.0004
2023-02-06 19:35:36,460 - mmcls - INFO - Epoch [2][500/782]	lr: 1.000e-02, eta: 0:06:39, time: 0.061, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:35:42,598 - mmcls - INFO - Epoch [2][600/782]	lr: 1.000e-02, eta: 0:06:33, time: 0.061, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:35:48,752 - mmcls - INFO - Epoch [2][700/782]	lr: 1.000e-02, eta: 0:06:27, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0009
2023-02-06 19:35:56,703 - mmcls - INFO - Epoch(val) [2][157]	accuracy_top-1: 95.5200, precision: 95.5327, f1_score: 95.5242
2023-02-06 19:36:04,885 - mmcls - INFO - Epoch [3][100/782]	lr: 1.000e-02, eta: 0:06:05, time: 0.082, data_time: 0.020, memory: 1847, loss: 0.0005
2023-02-06 19:36:11,046 - mmcls - INFO - Epoch [3][200/782]	lr: 1.000e-02, eta: 0:06:00, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:36:17,213 - mmcls - INFO - Epoch [3][300/782]	lr: 1.000e-02, eta: 0:05:55, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0011
2023-02-06 19:36:23,371 - mmcls - INFO - Epoch [3][400/782]	lr: 1.000e-02, eta: 0:05:49, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:36:29,532 - mmcls - INFO - Epoch [3][500/782]	lr: 1.000e-02, eta: 0:05:44, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:36:35,703 - mmcls - INFO - Epoch [3][600/782]	lr: 1.000e-02, eta: 0:05:38, time: 0.062, data_time: 0.001, memory: 1847, loss: 0.0004
2023-02-06 19:36:41,868 - mmcls - INFO - Epoch [3][700/782]	lr: 1.000e-02, eta: 0:05:33, time: 0.062, data_time: 0.001, memory: 1847, loss: 0.0003
2023-02-06 19:36:49,797 - mmcls - INFO - Epoch(val) [3][157]	accuracy_top-1: 95.5400, precision: 95.5458, f1_score: 95.5402
2023-02-06 19:36:58,003 - mmcls - INFO - Epoch [4][100/782]	lr: 1.000e-02, eta: 0:05:16, time: 0.082, data_time: 0.020, memory: 1847, loss: 0.0006
2023-02-06 19:37:04,175 - mmcls - INFO - Epoch [4][200/782]	lr: 1.000e-02, eta: 0:05:10, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0005
2023-02-06 19:37:10,351 - mmcls - INFO - Epoch [4][300/782]	lr: 1.000e-02, eta: 0:05:05, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0005
2023-02-06 19:37:16,525 - mmcls - INFO - Epoch [4][400/782]	lr: 1.000e-02, eta: 0:05:00, time: 0.062, data_time: 0.001, memory: 1847, loss: 0.0008
2023-02-06 19:37:22,700 - mmcls - INFO - Epoch [4][500/782]	lr: 1.000e-02, eta: 0:04:54, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:37:28,873 - mmcls - INFO - Epoch [4][600/782]	lr: 1.000e-02, eta: 0:04:49, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0014
2023-02-06 19:37:35,055 - mmcls - INFO - Epoch [4][700/782]	lr: 1.000e-02, eta: 0:04:43, time: 0.062, data_time: 0.001, memory: 1847, loss: 0.0005
2023-02-06 19:37:43,013 - mmcls - INFO - Epoch(val) [4][157]	accuracy_top-1: 95.5700, precision: 95.5731, f1_score: 95.5681
2023-02-06 19:37:51,218 - mmcls - INFO - Epoch [5][100/782]	lr: 1.000e-03, eta: 0:04:29, time: 0.082, data_time: 0.020, memory: 1847, loss: 0.0005
2023-02-06 19:37:57,407 - mmcls - INFO - Epoch [5][200/782]	lr: 1.000e-03, eta: 0:04:23, time: 0.062, data_time: 0.001, memory: 1847, loss: 0.0004
2023-02-06 19:38:03,597 - mmcls - INFO - Epoch [5][300/782]	lr: 1.000e-03, eta: 0:04:18, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0003
2023-02-06 19:38:09,782 - mmcls - INFO - Epoch [5][400/782]	lr: 1.000e-03, eta: 0:04:12, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0005
2023-02-06 19:38:15,972 - mmcls - INFO - Epoch [5][500/782]	lr: 1.000e-03, eta: 0:04:07, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:38:22,154 - mmcls - INFO - Epoch [5][600/782]	lr: 1.000e-03, eta: 0:04:01, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0005
2023-02-06 19:38:28,338 - mmcls - INFO - Epoch [5][700/782]	lr: 1.000e-03, eta: 0:03:55, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0005
2023-02-06 19:38:36,279 - mmcls - INFO - Epoch(val) [5][157]	accuracy_top-1: 95.5200, precision: 95.5167, f1_score: 95.5139
2023-02-06 19:38:44,470 - mmcls - INFO - Epoch [6][100/782]	lr: 1.000e-03, eta: 0:03:42, time: 0.082, data_time: 0.020, memory: 1847, loss: 0.0004
2023-02-06 19:38:50,636 - mmcls - INFO - Epoch [6][200/782]	lr: 1.000e-03, eta: 0:03:37, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:38:56,803 - mmcls - INFO - Epoch [6][300/782]	lr: 1.000e-03, eta: 0:03:31, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0005
2023-02-06 19:39:02,974 - mmcls - INFO - Epoch [6][400/782]	lr: 1.000e-03, eta: 0:03:25, time: 0.062, data_time: 0.001, memory: 1847, loss: 0.0004
2023-02-06 19:39:09,144 - mmcls - INFO - Epoch [6][500/782]	lr: 1.000e-03, eta: 0:03:20, time: 0.062, data_time: 0.001, memory: 1847, loss: 0.0005
2023-02-06 19:39:15,313 - mmcls - INFO - Epoch [6][600/782]	lr: 1.000e-03, eta: 0:03:14, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0005
2023-02-06 19:39:21,478 - mmcls - INFO - Epoch [6][700/782]	lr: 1.000e-03, eta: 0:03:09, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0003
2023-02-06 19:39:29,408 - mmcls - INFO - Epoch(val) [6][157]	accuracy_top-1: 95.4700, precision: 95.4772, f1_score: 95.4695
2023-02-06 19:39:37,605 - mmcls - INFO - Epoch [7][100/782]	lr: 1.000e-03, eta: 0:02:56, time: 0.082, data_time: 0.020, memory: 1847, loss: 0.0004
2023-02-06 19:39:43,769 - mmcls - INFO - Epoch [7][200/782]	lr: 1.000e-03, eta: 0:02:51, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:39:49,938 - mmcls - INFO - Epoch [7][300/782]	lr: 1.000e-03, eta: 0:02:45, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0006
2023-02-06 19:39:56,106 - mmcls - INFO - Epoch [7][400/782]	lr: 1.000e-03, eta: 0:02:39, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0003
2023-02-06 19:40:02,276 - mmcls - INFO - Epoch [7][500/782]	lr: 1.000e-03, eta: 0:02:34, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0003
2023-02-06 19:40:08,447 - mmcls - INFO - Epoch [7][600/782]	lr: 1.000e-03, eta: 0:02:28, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:40:14,646 - mmcls - INFO - Epoch [7][700/782]	lr: 1.000e-03, eta: 0:02:22, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:40:22,616 - mmcls - INFO - Epoch(val) [7][157]	accuracy_top-1: 95.4500, precision: 95.4642, f1_score: 95.4535
2023-02-06 19:40:30,811 - mmcls - INFO - Epoch [8][100/782]	lr: 1.000e-03, eta: 0:02:10, time: 0.082, data_time: 0.020, memory: 1847, loss: 0.0005
2023-02-06 19:40:36,973 - mmcls - INFO - Epoch [8][200/782]	lr: 1.000e-03, eta: 0:02:05, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0006
2023-02-06 19:40:43,143 - mmcls - INFO - Epoch [8][300/782]	lr: 1.000e-03, eta: 0:01:59, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:40:49,308 - mmcls - INFO - Epoch [8][400/782]	lr: 1.000e-03, eta: 0:01:53, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0003
2023-02-06 19:40:55,478 - mmcls - INFO - Epoch [8][500/782]	lr: 1.000e-03, eta: 0:01:47, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:41:01,641 - mmcls - INFO - Epoch [8][600/782]	lr: 1.000e-03, eta: 0:01:42, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0005
2023-02-06 19:41:07,806 - mmcls - INFO - Epoch [8][700/782]	lr: 1.000e-03, eta: 0:01:36, time: 0.062, data_time: 0.001, memory: 1847, loss: 0.0005
2023-02-06 19:41:15,727 - mmcls - INFO - Epoch(val) [8][157]	accuracy_top-1: 95.5300, precision: 95.5350, f1_score: 95.5307
2023-02-06 19:41:23,933 - mmcls - INFO - Epoch [9][100/782]	lr: 1.000e-04, eta: 0:01:25, time: 0.082, data_time: 0.020, memory: 1847, loss: 0.0004
2023-02-06 19:41:30,112 - mmcls - INFO - Epoch [9][200/782]	lr: 1.000e-04, eta: 0:01:19, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:41:36,294 - mmcls - INFO - Epoch [9][300/782]	lr: 1.000e-04, eta: 0:01:13, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0009
2023-02-06 19:41:42,480 - mmcls - INFO - Epoch [9][400/782]	lr: 1.000e-04, eta: 0:01:07, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0006
2023-02-06 19:41:48,667 - mmcls - INFO - Epoch [9][500/782]	lr: 1.000e-04, eta: 0:01:02, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:41:54,847 - mmcls - INFO - Epoch [9][600/782]	lr: 1.000e-04, eta: 0:00:56, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0004
2023-02-06 19:42:01,037 - mmcls - INFO - Epoch [9][700/782]	lr: 1.000e-04, eta: 0:00:50, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0003
2023-02-06 19:42:09,003 - mmcls - INFO - Epoch(val) [9][157]	accuracy_top-1: 95.4200, precision: 95.4309, f1_score: 95.4228
2023-02-06 19:42:17,191 - mmcls - INFO - Epoch [10][100/782]	lr: 1.000e-04, eta: 0:00:39, time: 0.082, data_time: 0.020, memory: 1847, loss: 0.0003
2023-02-06 19:42:23,356 - mmcls - INFO - Epoch [10][200/782]	lr: 1.000e-04, eta: 0:00:33, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0006
2023-02-06 19:42:29,521 - mmcls - INFO - Epoch [10][300/782]	lr: 1.000e-04, eta: 0:00:28, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0005
2023-02-06 19:42:35,687 - mmcls - INFO - Epoch [10][400/782]	lr: 1.000e-04, eta: 0:00:22, time: 0.062, data_time: 0.001, memory: 1847, loss: 0.0003
2023-02-06 19:42:41,853 - mmcls - INFO - Epoch [10][500/782]	lr: 1.000e-04, eta: 0:00:16, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0003
2023-02-06 19:42:48,018 - mmcls - INFO - Epoch [10][600/782]	lr: 1.000e-04, eta: 0:00:10, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0003
2023-02-06 19:42:54,183 - mmcls - INFO - Epoch [10][700/782]	lr: 1.000e-04, eta: 0:00:04, time: 0.062, data_time: 0.000, memory: 1847, loss: 0.0007
2023-02-06 19:42:59,195 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-06 19:43:02,565 - mmcls - INFO - Epoch(val) [10][157]	accuracy_top-1: 95.4100, precision: 95.4185, f1_score: 95.4126
